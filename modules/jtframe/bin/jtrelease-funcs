#!/bin/bash

function clean_up {
	if [[ ! -z "$DST" && -d "$DST" ]]; then
		echo "Deleting $DST"
		rm -rf "$DST";
	fi
}

function show_help {
	cat<<EOF
jtrelease.sh <hash> [arguments]

Copies a build to the SD card,MiSTer and JTBIN $JTBIN
Either the full path to the file is provided, or just the
hash to it, and the file is looked upon in the \$JTBUILDS path $JTBUILDS

-h, --help		This help screen
-l, --local		Do not copy to JTBIN
    --last      Use last friday's date, instead of next's
                or latest published date, if it is more recent
                than last friday's
--host			MiSTer host name
-r, --rom		Regenerate ROM files
-v, --verbose   Verbose
EOF
}

function check_jtbin {
	if [[ -z "$JTBIN" || ! -d "$JTBIN" || "$JTBIN" = "$DST/release" ]]; then
		echo "\$JTBIN is not well defined"
		return 1
	fi
}

function get_valid_zip {
	local hash="$1"
	local ref
	if [ -z "$hash" ]; then
		echo "Use jtrelease.sh git-hash"
		return 1
	fi

	ref=${JTBUILDS}/${hash:0:7}.zip
	if [ ! -e $ref ]; then
		echo "path $ref failed" >&2
		ref=${JTBUILDS}/mister_${hash:0:7}.zip;
	fi

	if [ ! -e $ref ]; then
		echo "No build ${hash:0:7} available" >&2
		echo "Tried path: `pwd`/$ref" >&2
		return 125
	fi

	echo $ref
}

function clone_repo {
	local hash="$1"
	local path="$2"
	set --
	git clone $JTROOT $path
	cd $path
	git checkout $hash
	source setprj.sh
	echo hola3
	cd $path
	git submodule init $JTFRAME/target/pocket
	git submodule update --depth 1 $JTFRAME/target/pocket
	git submodule init modules/jt51
	git submodule update --depth 1 modules/jt51
}

function get_full_hash {
	git rev-parse HEAD
}

function recompile_tool {
	local toolname="jtframe"
	local tmplog=`mktemp`
	local status=0
	cd $JTFRAME/src/$toolname
	go mod tidy
	if ! $toolname > $tmplog; then
		cat $tmplog
		status=1
	fi
	rm $tmplog
	return $status
}

function unzip_release {
	local zipfile="$1"
	local path="$2"
	cd $path
	echo "Unzipping $zipfile"
	unzip -q $zipfile -d release
	if [ -d release/release ]; then mv release/release/* release; rmdir release/release; fi
}

function clean_jtbin {
	if [ ! -d .git ]; then return; fi
	git reset --hard
	git clean -fd .
	git checkout master
	rm -rf mist sidi* pocket mister mra
}

function refresh_schematics {
	echo "Refreshing schematics"
	jtframe sch --git
	echo "Deleting non-arcade PCB schematics"
	rm -f $JTBIN/sch/{adapter,odyssey,rng}.pdf
}

function regenerate_mra {
	rm -rf release/mra
	find release/pocket -name "*rbf_r" | xargs -I% basename % .rbf_r | sort | uniq | sed s/^jt// > pocket.cores
	find release/{mister,sidi,sidi128,mist} -name "*rbf" | xargs -I% basename % .rbf | sort | uniq | sed s/^jt// | sort > mister.cores
	jtframe mra $SKIPROM --md5 --git `cat pocket.cores` --nodbg
	comm -3 pocket.cores mister.cores > other.cores
	sed -i '/neogeopocket/d' other.cores
	if [ `wc -l other.cores|cut -f1 -d' '` -gt 0 ]; then
		# cat other.cores
		jtframe mra $SKIPROM --md5 --skipPocket --git `cat other.cores` --nodbg
	fi
}

function copy_rbf {
	local repo="$1"
	local curfolder=$(basename $(pwd))
	echo "Copy release files to $curfolder"
	cp -r $repo/release/* .
}

function make_all_pocket_zips {
	echo "Making Pocket zip files"
	mkdir -p $JTBIN/pocket/zips
	for core in `find pocket/raw -name "*.rbf_r"`; do
		core=`basename $core .rbf_r`
		pocket_zip $core
	done
}

function make_md5_reference_file {
	jtutil md5
}

function pocket_zip {
	local corename="$1"
	cd $JTBIN/pocket/raw
	zip -qr jotego.${corename}.zip ${corename}.txt Assets/${corename} Cores/jotego.${corename} \
		Platforms/${corename}.json Platforms/_images/${corename}.bin Presets/jotego.${corename} Saves/${corename}
	mv jotego.${corename}.zip $JTBIN/pocket/zips
	cd -
}

function remove_mist_betas {
	echo "Removing games in beta phase for SiDi and MiST"
	for t in mist sidi sidi128; do
		for rbf in $JTBIN/$t/*.rbf; do
			corename=`basename $rbf .rbf`
			if jtframe cfgstr ${corename#jt} -o bash -t mister | grep JTFRAME_UNLOCKKEY > /dev/null; then
				rm -v $rbf;
			fi
		done
	done
}

function make_game_list {
	jtutil mra --core             > $JTBIN/game_list.md
	jtutil mra --core --main-only > $JTBIN/only_main_titles.md
}

function make_pocket_beta_helper {
	mkdir -p pocket/raw/Assets/jtpatreon/common
	echo "beta.bin goes here" > pocket/raw/Assets/jtpatreon/common/BETABIN_GOES_HERE
}

function make_sound_balance_audit {
	jtutil audit
	mv audit.csv sound_balance.csv
	git add sound_balance.csv
}

function commit_release {
	echo "Commit to git"
	git add .
	git commit -m "release for https://github.com/jotego/jtcores/commit/$HASHLONG"
}

function tag_release_in_jtcores {
	cd $JTROOT
	(git tag -f JTBIN && git push --tags --force) || echo "Could not tag the release on jtcores"
}